Prog ::= Def EOF | Def newline Prog
Def ::= DefLhs "=" DefRhs
DefLhs ::= Defdescription _id_args
args ::= "("_id_":"_type_ args2")" | e
args2 ::= "," _id_":"_type_ args2 | e
DefDescription ::= "program" | "action" | "unsafe action" | "function"
DefRhs ::= _{_ expression _}_
expression ::= Def newline expression | Statement newline expression | ""
expression2 ::= expression2 | e
Statement ::= _id_callargs | basictype
callargs ::= "("_id_")" | "("basictype")" | "("callargs2")" | e
callargs2 ::= _id_"="_id_"," _id_"="_id_ callargs3
callargs3 ::= ","id"="id | ","id"="id callargs3 | e
basictype ::= "true" | "false" | Integer | Double | String

where id and type are some names
newline is \n
e is the empty token



keywords
  seconds
  milliseconds
  nanoseconds
  true
  false

basic functions:
  +
  -
  *
  /
  print
  diverse mattestuff
  after
  every
  between
