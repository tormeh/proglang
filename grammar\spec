PROG ::= (newline* DEF newline*)+
DEF ::= DEFLHS = newline* DEFRHS
DEFLHS ::= DEFDESCRIPTION ID ARGS : TYPE
ARGS ::= ( ID : TYPE SUBARGS )
SUBARGS ::= , ID : TYPE
DEFRHS ::= { EXPRESSION+ newline* }
EXPRESSION ::= newline+ DEF | newline+ STATEMENT
STATEMENT ::= FUNCTIONCALL | BASICSTATEMENT | IDENTIFIERSTATEMNT
CALLARGS ::= ( NAMEDCALLARGS ) | ( CALLARG )
CALLARG ::= FUNCTIONCALL | IDENTIFIERSTATEMENT | BASICSTATEMENT
NAMEDCALLARGS ::= NAMEDCALLARG SUBCALLARGS+
SUBCALLARGS ::= , NAMEDCALLARG
NAMEDCALLARG ::= ID = CALLARG
FUNCTIONCALL ID CALLARGS

where id and type are some names
newline is \n
e is the empty token



keywords
  seconds
  milliseconds
  nanoseconds
  true
  false

basic functions:
  +
  -
  *
  /
  print
  diverse mattestuff
  after
  every
  between
