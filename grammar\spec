Prog ::= Def EOF | Def newlines Prog
Definition ::= DefLhs "=" optionalnewlines DefRhs
DefLhs ::= Defdescription _id_args
args ::= "("_id_":"_type_ args2")" | e
args2 ::= "," _id_":"_type_ args2 | e
DefDescription ::= "program" | "action" | "unsafe action" | "function" | "value"
DefRhs ::= _{_ expressions _}_ | Statement newlines
expressions ::= Def | Statement | Def newlines expressions | Statement newlines expressions | e
Statement ::= _id_callargs | basictype
callargs ::= "("_id_")" | "("basictype")" | "("callargs2")" | e
callargs2 ::= _id_"="_id_"," _id_"="_id_ callargs3
callargs3 ::= ","id"="id | ","id"="id callargs3 | e
basictype ::= "true" | "false" | integerobject | doubleobject | stringobject
optionalnewlines ::= e | newline | newline newlines
newlines ::= newline | newline newlines

where id and type are some names
newline is \n
e is the empty token



keywords
  seconds
  milliseconds
  nanoseconds
  true
  false

basic functions:
  +
  -
  *
  /
  print
  diverse mattestuff
  after
  every
  between
