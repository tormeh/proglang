syntax: + is one or more repetitions, * is zero or more repetitions, | is or, everything not in all-caps are terminal symbols, ::= separates the two sides of the production rule

PROG ::= (newline* DEF newline*)+
DEF ::= DEFLHS = newline* DEFRHS
DEFLHS ::= DEFDESCRIPTION ID ARGS : TYPE
ARGS ::= ( ID : TYPE SUBARGS )
SUBARGS ::= , ID : TYPE
DEFRHS ::= { EXPRESSION+ newline* }
EXPRESSION ::= newline+ DEF | newline+ STATEMENT
STATEMENT ::= FUNCTIONCALL | BASICSTATEMENT | IDENTIFIERSTATEMNT
CALLARGS ::= ( NAMEDCALLARGS ) | ( CALLARG )
CALLARG ::= FUNCTIONCALL | IDENTIFIERSTATEMENT | BASICSTATEMENT
NAMEDCALLARGS ::= NAMEDCALLARG SUBCALLARGS+
SUBCALLARGS ::= , NAMEDCALLARG
NAMEDCALLARG ::= ID = CALLARG
FUNCTIONCALL ::= ID CALLARGS
DEFDESCRIPTION ::= program | action | unsafe action | function | value | synchronized variable | channel
 
ID is an alphanumeric string with a non-capital first letter
TYPE is an alphanumeric string with a capital first letter
BASICSTATEMENT is either string, integer, float or boolean
IDENTIFIERSTATEMENT is a string used to identify something

where id and type are some names
newline is \n

basic functions:
  multiply
  divide
  pluss
  minus
  println
  readln
  deadline
  if

Intention
Fumurt is a language built with the intention that the programmer shall never be surprised. It assumes that the programmers are only able to completely understand their code on, at maximum, the level of a parser. And then only the code they can see right in the moment. Therefore Fumurt strives to imbue its syntax with as much meaning as possible and to concentrate declaration of concurrent code in one place (parallel but not concurrent code not affected). Language design inherently necessitates compromise and Fumurt compromises minimally on readability and predictability, sacrificing instead keyboard typing and rapid iteration. It favors predictability over flexibility and explicitness over terseness. It is not a Lisp, in other words.
If a function has more than one argument, the arguments have to be labeled with the same label as it is internally in the function. This idea comes from Python, where it is optional. Internally, Fumurt orders arguments alphabetically.
Fumurt has values, which declaration should be ordered so that that no value depends on a value below it, the way God intended.
Fumurt shall be deterministic in scheduling
In naming predictability is accomplished through a manner similar to Hungarian notation, an undervalued idea. This applies to any types of definitions that might have unexpected behavior. Functions with side effects have names prefixed with "action". Synchronized variables are prefixed with "synchronized". Functions prefixed with "thread" have special privileges and restrictions. They can accept synchronized variables as arguments and can and must be launched as independent threads from the program statement and can otherwise only be called by themselves. Actions cannot be called in parallel, as that would create unpredictable IO.
When a thread function calls itself (ie. tail recurses) or attempts any kind of IO that returns a value it will await a synchronization pause. During a synchronization pause its writes to synchronized variables will be published, its local copies of synchronized variables will be updated and its queued IO actions will take place.
Only one handle on a synchronized variable has write rights, the rest can only read a copy updated on synchronization pause


the typechecker shall:
ensure that in a function call, no two arguments have the same name
ensure that a value or function is never defined twice in the same definition or at the top of the tree
ensure that any statement that has a return type other than Nothing has the same return type as the containing definition's return type
ensure that a reference to a value is written below the definition of the value
ensure that for an if statement, the if argument/statement has type boolean, and the then and else statements have the same return type, which is the if statement's return type
ensure that in the Program definition, there are only statements of type between and every
ensure that the scope of a definition is the standard library, the definition's arguments and the definitions inside the definition, with the exception of Program which takes as implicit arguments all definitions at its level.
ensure that any object of a reference exists and is unambiguous in the scope of that reference

the code generator shall:

 

