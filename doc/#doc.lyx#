#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass report
\begin_preamble
\lstset{
numbers=left,
breaklines=true,
frame=single}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Fumurt: A programming language with deterministic threading
\end_layout

\begin_layout Author
Tormod Gjeitnes Hellen
\end_layout

\begin_layout Standard
http://www.cs.ucl.ac.uk/teaching_learning/msc_cgvi/projects/project_report_structure
/
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Chapter
Introduction
\end_layout

\begin_layout Standard

\emph on
First and foremost, you should write about the most interesting or important
 parts of your project.
 Devote most space and time to this.
 For example:
\end_layout

\begin_layout Standard

\emph on
What design choices did you have along the way, and why did you make the
 choices you made? What was the most difficult part of the project? Why
 was it difficult? How did you overcome the difficulties? Did you discover
 anything novel? What did you learn?
\end_layout

\begin_layout Standard

\emph on
Set the scene and problem statement/specification.
 Provide the motivation for reading this report.
 Introduce the structure of report (what you will cover in which chapters).
 
\end_layout

\begin_layout Chapter
Background
\end_layout

\begin_layout Standard

\emph on
You should provide enough background to the reader for them to understand
 what the project is all about.
 For example:
\end_layout

\begin_layout Standard

\emph on
What the reader needs to know in order to understand the rest of the report.
 Examiners like to know that you have done some background research and
 that you know what else has been done in the field (where relevant).
 Try to include some references.
 Related work (if you know of any) What problem are you solving? Why are
 you solving it? How does this relate to other work in this area? What work
 does it build on?
\end_layout

\begin_layout Standard

\emph on
For 'research-style' projects - ones in which a computational technique
 (for example neural networks, genetic algorithms, finite element analysis,
 ray tracing) is used to explore or extend the properties of a mathematical
 model, or to make predictions of some kind - it may be a good idea to split
 this chapter into two shorter ones, one covering the computational technique
 itself and one the area of application.
\end_layout

\begin_layout Standard

\emph on
The Examiners are just as interested in the process you went through in
 performing your project work as the results you finally produced.
 So, make sure your reports concentrate on why you made the particular choices
 and decisions that you did.
 We are looking for reasoned arguments and for critical assessment.
 This is especially so where design, implementation and engineering decisions
 have been made not just on technical merit but under pressure of non-functional
 requirements and external influences.
\end_layout

\begin_layout Section
Acknowledgements
\end_layout

\begin_layout Standard
The inner workings of the compiler are heavily influenced by a course the
 author took on compilers at the Technische Universit√§t Berlin under Peter
 Pepper and Judith Rohloff.
 While no code is reused, the structure of the compiler is very similar.
\begin_inset CommandInset label
LatexCommand label
name "sec:TUB course"

\end_inset


\end_layout

\begin_layout Section
Concurrency Paradigms
\end_layout

\begin_layout Standard
It is commonly understood that writing software is hard.
 The development of programming languages is a response to this problem.
 The common pattern is that flexible features that are easily used to write
 code that is hard to reason about are replaced by, often several, less
 flexible features.
 After all, the less flexible a feature is, the more predictable its use
 is.
 Three examples: 
\end_layout

\begin_layout Itemize
goto replaced by sequence, selection and iteration 
\begin_inset CommandInset citation
LatexCommand cite
key "structured proof"

\end_inset


\end_layout

\begin_layout Itemize
pointers replaced by indexes and references 
\end_layout

\begin_layout Itemize
mutable variables replaced by immutable values 
\end_layout

\begin_layout Standard
Interestingly, one can observe that as each feature becomes easier to reason
 about, the total number of features increase.
 For example, to eliminate mutation, one needs to also eliminate iteration.
 One way to do this is by using recursion, which is a full replacement for
 iteration.
 But recursion, while allowing immutability, is often harder for humans
 to understand [citation needed].
 To ameliorate this problem, a variety of machanisms have been implemented,
 for example map and fold, which performs common functions previously performed
 utilizing iteration.
 In this manner, the number of features often increase in the interest of
 analysability.
 Is this generally true? And if so, at what point does the drawbacks of
 increasing feature number outweigh the benefit of increased analyzability
 and predictability? Answering these questions is outside the scope of this
 report.
 Much progress has been made in making programs easier to understand and
 analyze in this fashion, yet there is always room for improvement.
 In later years, one feature in particular has risen to notability: Concurrency.
 In the past, concurrency has not been an issue for most programmers but
 as multi-processor (or multi-core) systems have gone mainstream, so has
 multithreaded programming
\begin_inset CommandInset citation
LatexCommand cite
key "free lunch over"

\end_inset

.
 The problems inherent to concurrency can roughly be divided into two categories
: Communication and scheduling; making sure the correct information is shared
 between threads in a correct way and making sure tasks are done at correct
 times, respectively[citation needed].
 One possibility is to let the programmer deal with these problems in an
 application-specific way.
 This is notoriously error-prone, however.
 Several abstractions have been deviced for dealing with the two concurrency
 problems in a systematic manner, to the author's knowledge:
\end_layout

\begin_layout Itemize
Actors 
\begin_inset CommandInset citation
LatexCommand cite
key "actors"

\end_inset


\end_layout

\begin_layout Itemize
CSP 
\begin_inset CommandInset citation
LatexCommand cite
key "CSP"

\end_inset


\end_layout

\begin_layout Itemize
Transactional memory[citation needed]
\end_layout

\begin_layout Itemize
Synchronous programming
\begin_inset CommandInset citation
LatexCommand cite
key "Esterel"

\end_inset


\end_layout

\begin_layout Standard
In the end we decided on using the synchronous programming paradigm.
 There are tradeoffs associated with chosing synchronous programming, but
 they were determined to be preferable to the alternatives.
 The main problems with synchronous programming are 
\end_layout

\begin_layout Enumerate
Difficulty in scaling beyond one physical machine.
 The cost of global synchronization grows with latency.
\end_layout

\begin_layout Enumerate
Performance loss due to processing resources idling as the synchronicity
 abstraction requires all operations to use the same amount of time.
\end_layout

\begin_layout Standard
Synchronous programming therefore has substantial problems, yet for single-machi
ne systems it presents a way to achieve multi-threaded performance and achitectu
re but with single-threaded predictability and therefore debugability.
 While the other abstractions place the responsibility for correct concurrent
 behaviour on the programmer, synchronous programming takes care of that
 and replaces it with the responsibility for performance, as the program
 performs best if all threads has an equal amount of work.
 Let us discuss the problems of the other abstractions
\end_layout

\begin_layout Itemize
Actors assume infinite message queues, with the failure mode being a loss
 of information.
 In a producer-consumer relationship, producer actors can overwhelm consumer
 actors.
 Actors are designed to mimic distributed systems and create a unified abstracti
on over these.
 Distributed systems have to correctly handle hardware failures, so loss
 of information is an acceptible failure mode for actors.
 However, this makes actors unsuitable for real-time systems as recovering
 from data loss and unpredictable memory usage are unacceptable tradeoffs.
 Ordering of IO is alse unpredictable.
\end_layout

\begin_layout Itemize
CSP systems use synchronous communication and therefore avoid the message
 queue problem of actors entirely.
 In exchange, they are open to deadlock, and the ordering of IO is unpredictable.
 CSP therefore requires brute force search for deadlocks, and debugging
 is harder than for single-threaded systems.
 Despite this, it is regarded as a solid choice for real time systems.
\end_layout

\begin_layout Itemize
Transactional memory, though it makes it look as if thread communication
 is easy, has its own problems.
 The unpredictability of the sequence of writing is a problem, as well as
 the unpredictable time it takes.
\end_layout

\begin_layout Section
Compilers
\end_layout

\begin_layout Section
Parser Combinators
\end_layout

\begin_layout Standard
Parser combinators are a higher order functions that accepts other parser
 combinators or parsers as input
\begin_inset CommandInset citation
LatexCommand cite
key "Parser combinators"

\end_inset

.
 The overall effect is similar to a domain specific language for constructing
 recursive descent parsers.
\end_layout

\begin_layout Section
What The Author Learned
\end_layout

\begin_layout Standard
Regex, C++11, advanced Scala/functional programming, parser combinators,
\end_layout

\begin_layout Chapter
Analysis and Design
\end_layout

\begin_layout Standard

\emph on
If your project involves designing a system, give a good high-level overview
 of your design.
\end_layout

\begin_layout Standard

\emph on
In many projects, the initial design and the final design differ somewhat.
 If the differences are interesting, write about them, and why the changes
 were made.
\end_layout

\begin_layout Standard

\emph on
If your design was not implemented fully, describe which parts you did implement
, and which you didn't.
 If the reason you didn't implement everything is interesting (eg it turned
 out to be difficult for unexpected reasons), write about it.
\end_layout

\begin_layout Standard
Initially, the goal of this thesis was to create a fundamentally new approach
 to managing concurrency, wherein the programmer would manually schedule
 the execution of tasks at compile time.
 Tasks would be allowed to write to special variables which would be used
 in lieu of final ones if the task could not finish in the alloted time
 frame.
 This effort was abandoned because of the burden it would impose on the
 programmer, the perceived difficulty of implementation and the unsatisfactory
 failure modes.
 Instead, it was decided that an approach belonging to the tradition of
 synchronous programming would be preferable.
 Given the importance of a familiar superficialities for language adoption
\begin_inset CommandInset citation
LatexCommand cite
key "Language adoption"

\end_inset

, it was decided that the language should have a familiar C/Algol-style
 syntax, rather than invent or adopt something less common.
\end_layout

\begin_layout Section
Language Design Goals
\end_layout

\begin_layout Standard
It is the goals of Fumurt to aid in producing correct programs suitable
 for real-time applications in general, and such multithreaded programs
 in particular.
\end_layout

\begin_layout Section
Runtime Execution
\end_layout

\begin_layout Standard
The goal of the programming language is to make a multithreaded program
 behave as predictably as were it singlethreaded and, more generally, to
 help create reliable applications A corollary of this is that only changes
 of state that are visible to a single thread can happen concurrently.
 All IO and inter-thread communication are required happen in a statically
 determined sequence.
 One way to do this is to have the program have two alternating phases:
\end_layout

\begin_layout Itemize
Computational phase: In which computations local to a thread are performed.
\end_layout

\begin_layout Itemize
Communicative phase: In which IO is effected and shared variables are updated,
 all in a single-threaded manner.
\end_layout

\begin_layout Standard
In the computational phase, the order in which computations are performed
 on the processor is irrelevant as nothing is shared between the thread
 and the rest of the world.
 Since the threads have no effect on each other or the outside world in
 this phase, the only difference between concurrent execution and sequential
 execution is speed.
 In the communicative phase, however, execution has to be single threaded.
 Using this scheme, the application appears to be single threaded both to
 itself and to the rest of the world, all the while enabling separation
 of concerns and better utilization of multi-core systems.
 The following figure illustrates the principle:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename architecture.eps
	lyxscale 70
	width 100text%

\end_inset


\end_layout

\begin_layout Standard
In terms of the actual execution a more detailed figure is offered:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename archdetailed.eps
	lyxscale 70
	width 100text%

\end_inset


\end_layout

\begin_layout Standard
Observe that in the computational stage we can make available parallel list
 transformations like map and fold or even futures, without affecting the
 outward behaviour of the system, except for performance:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename archdetailedwithmap.eps
	width 100text%

\end_inset


\end_layout

\begin_layout Standard
Futures and parallel list comprehensions are together applicable to all
 problems which can be divided into subproblems that can be done in parallel
 without communication.
 Futures are a bit of extra work to deal with, but the map-and-fold pattern,
 sometimes called mapReduce
\begin_inset CommandInset citation
LatexCommand cite
key "mapReduce"

\end_inset

, is easy to use and widely applicative to many problems.
\begin_inset CommandInset citation
LatexCommand cite
key "Hadoop at facebook"

\end_inset

 Indeed, map-and-fold is intensely used in the Fumurt compiler.
 Supporting map-and-fold and futures reduces the performance problems of
 all threads waiting on each other significantly as long as it can be applied
 to the most time-consuming task.
\end_layout

\begin_layout Section
Intermediate Target
\end_layout

\begin_layout Standard
For easy debugging and wide selection of binary targets we chose to first
 compile to an intermediate language and then let an external compiler perform
 the final transformation to binary form.
 This is a well-trodden path
\begin_inset CommandInset citation
LatexCommand cite
key "Haskell-to-C"

\end_inset

, and C is often used.
 Though many modern languages would be suitable for this, we had a wishlist
 of features that determined which language to choose:
\end_layout

\begin_layout Enumerate
No garbage collection or other other source of run-to-run variability.
\end_layout

\begin_layout Enumerate
Wide selection of final targets, including embedded.
\end_layout

\begin_layout Enumerate
Low overhead, whether in performance or memory.
 
\end_layout

\begin_layout Enumerate
A solid set of features to make transformation into the language easier.
 
\end_layout

\begin_layout Enumerate
Mature standard that is unlikely to break backwards compatibility.
\end_layout

\begin_layout Standard
C++ seems to satisfy all these criteria, and were therefore selected as
 the intermediate language.
 In particular, C has too few features, which means a transformation will
 have to make more difficult transformations and/or we would need to manually
 implement things like linked lists.
\end_layout

\begin_layout Section
Compiler Implementation Language
\end_layout

\begin_layout Standard
Scala was chosen as the implementation language for the compiler partly
 because it's what the author used in the TU Berlin compiler bau course
 (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:TUB course"

\end_inset

) and already had lots of experience in, but it also has some highly attractive
 qualities for making a compiler:
\end_layout

\begin_layout Itemize
A solid type checking which makes the code easier to work with, especially
 when refactoring
\end_layout

\begin_layout Itemize
A wide selection of functional abstractions, which allows compact code and
 eliminates simple but irritating bugs as well as access to imperative construct
s like loops etc.
 when this is more convenient
\end_layout

\begin_layout Itemize
A parser combinator library
\end_layout

\begin_layout Itemize
Fast execution time
\end_layout

\begin_layout Section
Syntax
\end_layout

\begin_layout Standard
Syntax is by definition somewhat arbitrary, but as Brainfuck demonstrates,
 some syntaxes are better than others.
 We settled on the following goals:
\end_layout

\begin_layout Itemize
Look modern and familiar.
 This is supposed to make it easier to learn, as well as more appealing
 to someone evaluating whether to learn it.
 
\end_layout

\begin_layout Itemize
Be simple.
 For ease of implementation.
\end_layout

\begin_layout Itemize
Be predictable, and aid the programmer in the understanding of the program.
\end_layout

\begin_layout Subsection
Modern and Familiar
\end_layout

\begin_layout Standard
Fumurt adopts several conventions from contemporary languages:
\end_layout

\begin_layout Itemize
Separating expressions with line endings instead of special characters (for
 example semicolon).
\end_layout

\begin_layout Itemize
Employ 
\begin_inset Quotes eld
\end_inset

instanceOfType:Type
\begin_inset Quotes erd
\end_inset

 instead of 
\begin_inset Quotes eld
\end_inset

Type instanceOfType
\begin_inset Quotes erd
\end_inset

 when declaring the type of something.
\end_layout

\begin_layout Itemize
We use 
\begin_inset Quotes eld
\end_inset

=
\begin_inset Quotes erd
\end_inset

 to perform definitions and mark the boundaries of blocks with brackets
\end_layout

\begin_layout Standard
This results in syntax with a distinctly modern look:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

function integerIdentity(x:Integer):Integer = {x}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
One might wish for brackets to be optional in such one-liners, though, 
\end_layout

\begin_layout Subsection
Simple
\end_layout

\begin_layout Subsection
Predictable and Helpful
\end_layout

\begin_layout Standard
We observe that although modern languages and their type systems have made
 the use of functions safe, the syntax of modern languages insufficiently
 aid the programmer in understanding what a function does, as it is called:
\end_layout

\begin_layout Itemize
Functions that perform IO or mutate shared variables are called actions
 and their names must begin with 
\begin_inset Quotes eld
\end_inset

action
\begin_inset Quotes erd
\end_inset

, like so:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

action actionPrintFoo:Nothing =
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  actionPrint("  FOO   ")
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

Similarly thread names begin with 
\begin_inset Quotes eld
\end_inset

thread
\begin_inset Quotes erd
\end_inset

 and synchronized variable names begin with 
\begin_inset Quotes eld
\end_inset

synchronized
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Itemize
Function arguments, if there are more than one, are distinguished not by
 relative position, but by name (as is optionally available in Python).
 Here we see a call to the if function and some calls to the toString function:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if(condition=true, then=toString(1), else=toString(0))
\end_layout

\end_inset


\end_layout

\begin_layout Section
Scope
\end_layout

\begin_layout Standard
Among the goals of this programming language is to help the programmer understan
d the program.
 One way we do this is to make dependencies between functions explicit via
 
\emph on
inclusions
\emph default
.
 It is common among languages for changes in one function to affect the
 correctness of seemingly unrelated parts of the program.
 In the following example, changing the definition of function c affects
 the output of function a:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

function a:Nothing = 
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  b()
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

function b:Nothing =
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  c()
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

function c:Nothing =
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  actionPrint("string")
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
While the above example is a bit contrived, it illustrates the problem.
 Using inclusions, the dependencies become explicit:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

function a(b:Inclusion, c:Inclusion):Nothing = 
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  b(c)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

function b(c:Inclusion):Nothing =
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  c()
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

function c:Nothing =
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  actionPrint("string")
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that inclusions are not functions as arguments - the passed function
 and the name of the inclusion must have the same name; it is simply there
 to make dependencies between functions explicit.
\end_layout

\begin_layout Standard
In keeping with our goal of being modern and familiar, we allow definitions
 of functions inside other definitions of functions.
 Recursive function definitions, that is.
 This means that developers can hide functions inside other functions when
 they are not needed outside them.
\end_layout

\begin_layout Section
Operators
\end_layout

\begin_layout Standard
Operators are functions with two arguments and the function name in between
 the arguments.
 There are multiple problems with them:
\end_layout

\begin_layout Enumerate
Convention suggests that their names should be information-anemically short,
 often one character.
 This is obviously problematic
\end_layout

\begin_layout Enumerate
Their arguments are nameless, which kind of sabotages the point of having
 named arguments for functions a little
\end_layout

\begin_layout Enumerate
How to define operator precedence? For math operators there's convention,
 but otherwise this may be confusing for users of operators.
\end_layout

\begin_layout Standard
We haven't found any good solutions to this, but it's hard to argue with
 the convenience of operators.
 We provide some predictability to operators by enforcing the following
 rules:
\end_layout

\begin_layout Enumerate
Either the types of the two arguments has to be the same or one of the types
 have to be a container type of the other.
 For example Int and Int or List[Int] and Int.
\end_layout

\begin_layout Enumerate
There's no operator precedence, it has to be defined on a case-by-case basis
 using parentheses
\end_layout

\begin_layout Section
Mutability, Or The Absence of Such
\end_layout

\begin_layout Standard
Mutable variables are a major source of bugs, and even experienced developers
 create bugs when a variable that would have held the correct information
 previously no longer holds that information.
 At the same time we need mutable values in some ways in order to share
 information across threads.
 So we disallow mutable variables, except the synchronized variables that
 are shared across threads.
 
\end_layout

\begin_layout Subsection
Loops
\end_layout

\begin_layout Standard
Loops are familiar for many people, yet are usually not included in languages
 with only immutable values, because their utility is pretty limited.
 However, they are convenient and they are equivalent to tail-recursion.
 The major advantages of tail recursion over looping is that the assignment
 and dependencies are explicit.
 We decided we could make loops that are as safe as tail recursion while
 being almost as friendly as loops:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

value y:Int = 5
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

value x:Int = loop(y=y,x=y)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  if(
\end_layout

\begin_layout Plain Layout

  condition=(y>0), 
\end_layout

\begin_layout Plain Layout

  then=
\end_layout

\begin_layout Plain Layout

  {
\end_layout

\begin_layout Plain Layout

  x = x*y 
\end_layout

\begin_layout Plain Layout

  y = y-1
\end_layout

\begin_layout Plain Layout

  continue
\end_layout

\begin_layout Plain Layout

  }, 
\end_layout

\begin_layout Plain Layout

  else=break)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Types
\end_layout

\begin_layout Standard
Because we try to be familiar we want to provide types along with their
 popular object oriented nomenclature.
 So we have classes, just that they are immutable.
 They are defined by their constructors:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

class IntAndString(int:Integer, string:String)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

value x = IntAndString(int=3, string="something")
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We do not have inheritance, because while inheritance means you get code
 reuse, it also obscures the class that inherits.
 When one class inherits from a hierarchy, one needs to understand not only
 what's written about that class but also the entire hierarchy in order
 to understand the end result.
\end_layout

\begin_layout Standard
In order to aid the programmer in understanding their own and others' code,
 the names of types always lead with a capital letter.
 Conver
\end_layout

\begin_layout Subsection
Interfaces
\end_layout

\begin_layout Standard
All classes are interfaces, but one can also create interfaces that aren't
 classes using the 
\begin_inset Quotes eld
\end_inset

interface
\begin_inset Quotes erd
\end_inset

 keyword.
 When implementing an interface one explicitly have to note what interfaces
 the class is implementing.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

interface intAndString(int:Integer, string:String)
\end_layout

\begin_layout Plain Layout

//or
\end_layout

\begin_layout Plain Layout

class intAndString(int:Integer, string:String)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class intAndStringAndBool(int:Integer, string:String, bool:Boolean) implements
 intAndString
\end_layout

\end_inset


\end_layout

\begin_layout Section
Grammar
\end_layout

\begin_layout Chapter
Implementation
\end_layout

\begin_layout Standard

\emph on
Give code details (not a complete listing, but descriptions of key parts).
 Discuss the most important/interesting aspects.
 It probably won't be possible to discuss everything - give a rationale
 for what you do discuss.
\end_layout

\begin_layout Section
Overview
\end_layout

\begin_layout Standard
The compiler consists of four parts: The scanner, parser, checker and code
 generator.
 There is no optimizer, although the requirement for no dynamic destruction
 or creation allows us to use a loop in threads instead of just recursion.
 This is necessary because neither Clang nor GCC could correctly optimize
 that tail recursion into a loop in testing, leading to a stack overflow.
\end_layout

\begin_layout Section
Scanner
\end_layout

\begin_layout Standard
Drawing on experience from the TU Berlin course, the Scala Standard Parser
 Combinator Library was chosen.
 
\end_layout

\begin_layout Standard
Parsers for individual tokens are formed like this:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def intParser: Parser[IntegerT] = positioned( new Regex("""(0|[1-9]
\backslash
d*)""") ^^ {x => IntegerT(x.toInt)} )
\end_layout

\begin_layout Plain Layout

def equalParser: Parser[EqualT] = positioned( new Regex("=") ^^ {x => EqualT()}
 )
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The parsers are combined into the final scanner:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def scan: Parser[Token] = 
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  (
\end_layout

\begin_layout Plain Layout

    spaceParser                 |
\end_layout

\begin_layout Plain Layout

    programStrParser            |
\end_layout

\begin_layout Plain Layout

    threadParser                |
\end_layout

\begin_layout Plain Layout

    actionParser                |
\end_layout

\begin_layout Plain Layout

    synchronizedVariableParser  |
\end_layout

\begin_layout Plain Layout

    functionParser              |
\end_layout

\begin_layout Plain Layout

    trueParser                  |
\end_layout

\begin_layout Plain Layout

    falseParser                 |
\end_layout

\begin_layout Plain Layout

    openParenthesisParser       |
\end_layout

\begin_layout Plain Layout

    closeParenthesisParser      |
\end_layout

\begin_layout Plain Layout

    openCurlyBracketParser      |
\end_layout

\begin_layout Plain Layout

    closeCurlyBracketParser     |
\end_layout

\begin_layout Plain Layout

    doubleParser                |
\end_layout

\begin_layout Plain Layout

    intParser                   |
\end_layout

\begin_layout Plain Layout

    equalParser                 |
\end_layout

\begin_layout Plain Layout

    colonParser                 |
\end_layout

\begin_layout Plain Layout

    commaParser                 |
\end_layout

\begin_layout Plain Layout

    newlineParser               |
\end_layout

\begin_layout Plain Layout

    stringParser                |
\end_layout

\begin_layout Plain Layout

    idParser                    |
\end_layout

\begin_layout Plain Layout

    typeParser  
\end_layout

\begin_layout Plain Layout

  )            
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Where 
\begin_inset Quotes eld
\end_inset

|
\begin_inset Quotes erd
\end_inset

 is an alternative operator with backtracking
\begin_inset CommandInset citation
LatexCommand cite
key "scala parser combinator doc"

\end_inset


\end_layout

\begin_layout Section
Parser
\end_layout

\begin_layout Standard
Like in the scanner, the Scala Standard Parser Combinator Library was used.
 This 
\end_layout

\begin_layout Section
Checker
\end_layout

\begin_layout Section
Code generator
\end_layout

\begin_layout Subsection
Annotator
\end_layout

\begin_layout Section
Not Implemented
\end_layout

\begin_layout Chapter
Testing
\end_layout

\begin_layout Standard

\emph on
Test plan -- how the program/system was verified.
 Put the actual test results in the Appendix.
 This section is useful if your project is more on the software engineering
 side than research focused.
\end_layout

\begin_layout Chapter
Results
\end_layout

\begin_layout Standard

\emph on
This covers different areas to the 'Testing' chapter, and is appropriate
 for 'research style' projects.
 For such projects this chapter should detail the types of experiments/simulatio
ns that were carried out with the code written.
 Why were certain experiments carried out but not others? What were the
 important parameters in the simulation and how did they affect the results?
 If there are very many graphs and tables associated with this chapter they
 may be put in the Appendix, but it is generally better to keep these close
 to the text they illustrate, as this is easier for the reader.
\end_layout

\begin_layout Chapter
Conclusion, Evaluation and Further Work
\end_layout

\begin_layout Standard

\emph on
What have you achieved? Give a critical appraisal (evaluation) of your own
 work - how could the work be taken further (perhaps by another student
 next year)?
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "1"
key "structured proof"

\end_inset

 B√∂hm et Jacopini, 1966
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "2"
key "free lunch over"

\end_inset

 Sutter, 2005
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "3"
key "Esterel"

\end_inset

Berry et Gonthier, 1992
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "4"
key "Language adoption"

\end_inset

Meyerovich et Rabkin, 2013
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "5"
key "actors"

\end_inset

Hewitt, Bishop et Steiger, 1973
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "6"
key "CSP"

\end_inset

Hoare, 1978
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "7"
key "mapReduce"

\end_inset

Dean et Ghemawat, 2004
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "8"
key "Hadoop at facebook"

\end_inset

Borthakur et al.
 2011
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "9"
key "Haskell-to-C"

\end_inset

Hall, Hammond, Partain, Jones et Wadler, 1993
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "10"
key "Parser combinators"

\end_inset

Frost et Launchbury, 1989
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "11"
key "scala parser combinator doc"

\end_inset

http://www.scala-lang.org/files/archive/api/2.11.x/scala-parser-combinators/index.htm
l#scala.util.parsing.combinator.Parsers$Parser
\end_layout

\begin_layout Chapter
\start_of_appendix
System manual
\end_layout

\begin_layout Standard

\emph on
This should include all the technical details (where is the code? what do
 you type to compile it? etc) that would enable a student to continue your
 project next year, to be able to amend your code and extend it.
\end_layout

\begin_layout Chapter
User manual
\end_layout

\begin_layout Standard

\emph on
This should give enough information for someone to use what you have designed
 and implemented.
\end_layout

\begin_layout Chapter
Code listing
\end_layout

\begin_layout Standard

\emph on
Your code should be well commented.
 In order not to use up too many pages of your maximum 120 on code, you
 may like to use the 'a2ps' Unix facility, which allows you to put two pages
 of code onto one side of paper - see the Unix 'man' pages for details.
 If you have a great deal of code, and including all of it would take you
 over the page limit, you can make the rest available on a floppy disk or
 CD-ROM.
 You will need to bring in two copies of any disks or CDs you include when
 you hand in your project report, one to go with each copy of your project.
\end_layout

\end_body
\end_document
